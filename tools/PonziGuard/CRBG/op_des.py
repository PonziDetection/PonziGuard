#!/usr/bin/env python
# -*- coding: utf-8 -*-

OpList = [
	'STOP',
	'ADD',
	'MUL',
	'SUB',
	'DIV',
	'SDIV',
	'MOD',
	'SMOD',
	'ADDMOD',
	'MULMOD',
	'EXP',
	'SIGNEXTEND',
	'LT',
	'GT',
	'SLT',
	'SGT',
	'EQ',
	'ISZERO',
	'AND',
	'XOR',
	'OR',
    'NOT',
	'BYTE',
	'SHA3',
	'ADDRESS',  
	'BALANCE', 
	'ORIGIN', 
	'CALLER', 
	'CALLVALUE',
	'CALLDATALOAD',
	'CALLDATASIZE',
	'CALLDATACOPY',
	'CODESIZE',
	'CODECOPY',
	'GASPRICE',
	'EXTCODESIZE',
	'EXTCODECOPY',
	'BLOCKHASH',
	'COINBASE',
	'TIMESTAMP',
	'NUMBER',
	'DIFFICULTY',
	'GASLIMIT',
	'POP',
	'MLOAD',
	'MSTORE',
	'SLOAD',
	'SSTORE',
	'JUMP',
	'JUMPI',
	'PC',
	'MSIZE',
	'GAS',
	'JUMPDEST',
	'PUSH1',
	'DUP1',
	'SWAP1',
	'LOG0',
	'CREATE',
	'CALL',
	'CALLCODE',
	'RETURN',
	'SELFDESTRUCT',
	'DELEGATECALL',
	'REVERT',
	'RETURNDATACOPY',
	'RETURNDATASIZE',
	'STATICCALL',
	'EXTCODEHASH',
	'SAR',
	'SHR',
	'SHL'
]



opcode_des = [
    'Halts execution.',
    'Addition operation.',
    'Multiplication operation.',
    'Subtraction operation.',
    'Integer division operation.',
    'Signed integer division operation (truncated). Where all values are treated as two’s complement signed 256-bit integers. Note the overflow semantic when −2 255 is negated.',
    'Modulo remainder operation.',
    'Signed modulo remainder operation. Where all values are treated as two’s complement signed 256-bit integers.',
    'Modulo addition operation. All intermediate calculations of this operation are not subject to the 2 256 modulo.',
    'Modulo multiplication operation. All intermediate calculations of this operation are not subject to the 2 256 modulo.',
    'Exponential operation.',
    'Extend length of two’s complement signed integer.',
    'Less-than comparison.',
    'Greater-than comparison.',
    'Signed less-than comparison. Where all values are treated as two’s complement signed 256-bit integers.',
    'Signed greater-than comparison. Where all values are treated as two’s complement signed 256-bit integers.',
    'Equality comparison.',
    'Simple not operator.',
    'Bitwise AND operation.',
    'Bitwise XOR operation.',
    'Bitwise OR operation.',
    'Bitwise NOT operation.',
    'Retrieve single byte from word. For the Nth byte, we count from the left (i.e. N=0 would be the most significant in big endian).',
    'Compute Keccak-256 hash.',
    'Get address of currently executing account.',
    'Get balance of the given account.',
    'Get execution origination address. This is the sender of original transaction; it is never an account with non-empty associated code.',
    'Get caller address. This is the address of the account that is directly responsible for this execution.',
    'Get deposited value by the instruction/transaction responsible for this execution.',
    'Get input data of current environment. This pertains to the input data passed with the message call instruction or transaction.',
    'Get size of input data in current environment. This pertains to the input data passed with the message call instruction or transaction.',
    'Copy input data in current environment to memory. This pertains to the input data passed with the message call instruction or transaction.',
    'Get size of code running in current environment.',
    'Copy code running in current environment to memory.',
    'Get price of gas in current environment. This is gas price specified by the originating transaction.',
    'Get size of an account’s code.',
    'Copy an account’s code to memory.',
    'Get the hash of one of the 256 most recent complete blocks.',
    'Get the block’s beneficiary address.',
    'Get the block’s timestamp.',
    'Get the block’s number.',
    'Get the block’s difficulty.',
    'Get the block’s gas limit.',
    'Remove item from stack.',
    'Load word from memory. The addition in the calculation of μ 0 i is not subject to the 2 256 modulo.',
    'Save word to memory. The addition in the calculation of μ 0 i is not subject to the 2 256 modulo.',
    'Load word from storage.',
    'Save word to storage.',
    'Alter the program counter.',
    'Conditionally ( alter the program counter.',
    'Get the value of the program counter prior to the increment corresponding to this instruction.',
    'Get the size of active memory in bytes.',
    'Get the amount of available gas, including the corresponding reduction for the cost of this instruction.',
    'Mark a valid destination for jumps. This operation has no effect on machine state during execution.',
    'Place 1 byte item on stack.',
    'Duplicate 1st stack item.',
    'Exchange 1st and 2nd stack items.',
    'Append log record with no topics.',
    'Create a new account with associated code',
    'Message-call into an account.',
    'Message-call into this account with an alternative account’s code. Exactly equivalent to CALL except:',
    'Halt execution returning output data. This has the effect of halting the execution at this point with output defined.',
    'Halt execution and register account for later deletion.',
    'Message-call into this account with an alternative account’s code, but persisting the current values for sender and value.',
    'Halt execution reverting state changes but returning data and remaining gas.',
    'Copy output data from the previous call to memory.',
    'Get size of output data from the previous call from the current environment.',
    'Static message-call into an account. Exactly equivalent to CALL except:',
    'Get hash ( of an account’s code.',
    'Arithmetic (signed) right shift operation.',
    'Logical right shift operation.',
    'Left shift operation.'
]

opcode_in_out = [
    (0,0),
    (2,1),
    (2,1),
    (2,1),
    (2,1),
    (2,1),
    (2,1),#MOD,
    (2,1),#SMOD,
    (3,1),#ADDMOD,
    (3,1),#MULMOD,
    (2,1),#EXP
    (2,1),
    (2,1),
    (2,1),
    (2,1),
    (2,1),#SGT
    (2,1),
    (1,1),
    (2,1),#XOR
    (2,1),
    (1,1),
    (2,1),#BYTE
    (2,1),
    (0,1),
    (1,1),
    (0,1),
    (0,1),
    (0,1),
    (1,1),
    (0,1),
    (3,0),#CALLDATACOPY
    (0,1),
    (3,0),
    (0,1),
    (1,1),
    (4,0),
    (1,1),#BLOCKHASH
    (0,1),
    (0,1),
    (0,1),#NUMBER
    (0,1),
    (0,1),
    (1,0),#POP
    (1,1),
    (2,0),
    (1,1),#SLOAD
    (2,0),
    (1,0),
    (2,0),
    (0,1),#PC
    (0,1),
    (0,1),
    (0,0),
    (0,1),#PUSH1
    (1,2),
    (2,2),
    (2,0),
    (3,1),#CREATE
    (7,1),#CALL
    (7,1),
    (2,0),
    (1,0),#SELFDESTRUCTION
    (6,1),
    (2,0),
    (3,0),#RETURNDATACOPY
    (0,1),
    (6,1),#STATICCALL
    (1,1),
    (2,1),#SAR
    (2,1),
    (2,1),
    (2,1)

    
]